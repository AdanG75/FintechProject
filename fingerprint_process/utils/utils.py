import base64
import io
from typing import List

import cv2 as cv
import numpy as np
from PIL import Image

from fingerprint_process.preprocessing.connect_sensor import ConnectSensor
from fingerprint_process.preprocessing.fingerprint_raw import FingerprintRaw
from fingerprint_process.description.fingerprint import Fingerprint
from fingerprint_process.utils.bank_fingerprint_images import BankFingerprint
from fingerprint_process.matching.match import match
from fingerprint_process.utils.error_message import ErrorMessage


def create_fingerprint_samples():
    bank_fp = BankFingerprint(num_fingerprints=20, address_output='./authentication/sampleImages/',
                              name='Fingerprint_Test', extension='.bmp')
    bank_fp.generate_bank_fingerprint(auto_named=False)


def get_data_fingerprint(source='sensor', data_fingerprint=None):
    """
    A function to get the data of the raw fingerprint.

    :param source: A string which could be 'sensor' when the data is get from a serial port
                        and 'api' when is get from api.
    :param data_fingerprint: An int array which is obtained from api. Only it is used when data from api.

    :return: a tuple with this data (False,) when couldn't possible to get the raw fingerprint. On the other hand,
    return the raw fingerprint into a bit array.
    """
    if data_fingerprint is None:
        data_fingerprint = []

    if source.lower() == 'sensor':
        connect_sensor = ConnectSensor(serial_port='/dev/ttyUSB0', baud_rate=57600, width=256, height=288)
        data_fingerprint_raw = connect_sensor.catch_data_fingerprint()
    elif source.lower() == 'api':
        fingerprint_raw = FingerprintRaw()
        data_fingerprint_raw = fingerprint_raw.get_fingerprint_raw(data_fingerprint)
    else:
        return (False,)

    return data_fingerprint_raw


def change_directory_of_images():
    finish = False
    ubication_image = None

    while (not finish):
        ubication_image = './fingerprint_process/sampleImages/'
        print('\n\t Directory to search image: {}'.format(ubication_image))
        print('Would you like to change the directory by default:\n')
        print('\t [Y]es')
        print('\t [N]o')
        option = input('\nSelect you option: ')

        if (option[0].upper() == 'Y'):
            ubication_image = input('Write the new directory to search image: ')
            finish = True
        elif (option[0].upper() == 'N'):
            finish = True
        else:
            continue

    name_image = input('Write the image name (with extension): ')
    ubication_image += name_image

    return ubication_image


def get_description_fingerprint(name_fingerprint='fingerprint', source='sensor', ubication_image='', show_result=True,
                                save_result=True):
    """
    Obtain the full description of a fingerprint

    :param name_fingerprint: (str) The name that fingerprint object will receive
    :param source: (str) The place where will catch the fingerprint:
                    'sensor' when is caught from serial port
                    'image' when is caught from an image
                    'api' when is caught from the api
    :param ubication_image: (str) The path where the image can be found. Only it is used
                            when the source is 'image'
    :param show_result: (bool) True when we want to show all plots and sub-fingerprints
                        images generated by the application. Always False when source is 'api'.
    :param save_result: (bool) True when we want to save all plots and sub-fingerprints
                        images generated by the application. In case that source is 'api'
                        the application will only save the raw fingerprint.

    :return: a fingerprint object when all was ok, in other case return an ErrorMessage.

    """
    fingerprint = Fingerprint(characteritic_point_thresh=0.8, name_fingerprint=name_fingerprint,
                              show_result=show_result, save_result=save_result)
    process_message = None

    if source.lower() == 'sensor':
        data_image = get_data_fingerprint(source='sensor')
        if len(data_image) < 2:
            print('Error to get the fingerprint image')
            process_message = ErrorMessage.VOID_FINGERPRINT
            return process_message

        process_message = fingerprint.describe_fingerprint(data_image, angles_tolerance=1)
    elif source.lower() == 'api':
        pass
    elif source.lower() == 'image':
        if not ubication_image or ubication_image.isspace():
            ubication_image = change_directory_of_images()

        img = cv.imread(ubication_image, 0)
        # img = cv.imread('./authentication/sampleImages/Huella70.bmp', 0)

        if img is None:
            print('Error to get the fingerprint image')
            process_message = ErrorMessage.VOID_FINGERPRINT
            return process_message

        process_message = fingerprint.describe_fingerprint(angles_tolerance=1, from_image=True, fingerprint_image=img)

    else:
        return ErrorMessage.NOT_OPTION_FOUND

    if process_message == fingerprint.FINGERPRINT_OK:
        return fingerprint
    else:
        fingerprint.show_message(process_message)
        return process_message


def save_fingerprint_as_json_from_sensor(
        path_json: str = './data/',
        name_json: str = 'fingerprintRawData',
        serial_port: str = '/dev/ttyUSB0',
        baud_rate: int = 57600
):
    connect_sensor = ConnectSensor(serial_port=serial_port, baud_rate=baud_rate, width=256, height=288)

    response = connect_sensor.save_fingerprint_into_json(path_json=path_json, name_json=name_json)

    if response == (False,):
        return response

    return ErrorMessage.FINGERPRINT_OK


def match_index_and_base_fingerprints(base_name: str, input_name: str, mode: str, source: str):
    global base_fingerprint, index_fingerprint

    if source.lower() == 'sensor':
        base_fingerprint = get_description_fingerprint(name_fingerprint=base_name, source=source.lower())
        index_fingerprint = get_description_fingerprint(name_fingerprint=input_name, source=source.lower())
    elif source.lower() == 'image':
        base_fingerprint = get_description_fingerprint(name_fingerprint=base_name, source=source.lower())
        index_fingerprint = get_description_fingerprint(name_fingerprint=input_name, source=source.lower())
    elif source.lower() == 'api':
        pass
    else:
        return ErrorMessage.NOT_OPTION_FOUND

    return match(base_fingerprint, index_fingerprint, mode)


def save_fingerprint_into_json(
        serial_port: str = '/dev/ttyUSB0',
        baud_rate: int = 57600,
        path_json: str = "./fingerprint_process/data/",
        name_json: str = "fingerprintRawData"
):
    connect_sensor = ConnectSensor(serial_port=serial_port, baud_rate=baud_rate, width=256, height=288)
    result = connect_sensor.save_fingerprint_into_json(path_json=path_json, name_json=name_json)

    return result


def raw_fingerprint_construction(data_fingerprint: List):
    fingerprint_raw = FingerprintRaw()

    raw_data_fingerprint = fingerprint_raw.get_fingerprint_raw(data=data_fingerprint)

    if isinstance(raw_data_fingerprint, tuple):
        return raw_data_fingerprint

    fingerprint = Fingerprint(save_result=False, show_result=False, name_fingerprint="Fingerprint_HTML")

    raw_fingerprint = fingerprint.reconstruction_fingerprint(raw_data_fingerprint)

    return raw_fingerprint


def show_fingerprint_from_array(fingerprint_data):

    raw_fingerprint = raw_fingerprint_construction(data_fingerprint=fingerprint_data)

    if isinstance(raw_fingerprint, tuple):
        return ErrorMessage.RECONSTRUCTION_FAILED

    fingerprint_image = Image.fromarray(raw_fingerprint)
    fingerprint_image = fingerprint_image.convert("L")

    fingerprint_image.show()

    return ErrorMessage.FINGERPRINT_OK


def show_fingerprint_form_base64(image_base64: bytes) -> None:
    image_str = image_base64.decode()

    img = Image.open(io.BytesIO(base64.b64decode(image_str)), formats=["BMP"])

    img.show("Fingerprint from Base64")



